'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateResults = exports.updateEntities = exports.cancelQuery = exports.mutateAsync = exports.requestAsync = exports.mutateFailure = exports.mutateSuccess = exports.mutateStart = exports.requestFailure = exports.requestSuccess = exports.requestStart = undefined;

var _actionTypes = require('../constants/action-types');

var actionTypes = _interopRequireWildcard(_actionTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var requestStart = exports.requestStart = function requestStart(_ref) {
  var body = _ref.body,
      meta = _ref.meta,
      networkHandler = _ref.networkHandler,
      queryKey = _ref.queryKey,
      url = _ref.url;

  return {
    type: actionTypes.REQUEST_START,
    url: url,
    body: body,
    networkHandler: networkHandler,
    meta: meta,
    queryKey: queryKey
  };
};

var requestSuccess = exports.requestSuccess = function requestSuccess(_ref2) {
  var body = _ref2.body,
      duration = _ref2.duration,
      entities = _ref2.entities,
      results = _ref2.results,
      meta = _ref2.meta,
      queryKey = _ref2.queryKey,
      responseBody = _ref2.responseBody,
      responseHeaders = _ref2.responseHeaders,
      responseText = _ref2.responseText,
      status = _ref2.status,
      url = _ref2.url;

  return {
    type: actionTypes.REQUEST_SUCCESS,
    url: url,
    body: body,
    duration: duration,
    status: status,
    entities: entities,
    results: results,
    responseBody: responseBody,
    responseText: responseText,
    responseHeaders: responseHeaders,
    meta: meta,
    queryKey: queryKey,
    time: Date.now()
  };
};

var requestFailure = exports.requestFailure = function requestFailure(_ref3) {
  var body = _ref3.body,
      duration = _ref3.duration,
      meta = _ref3.meta,
      queryKey = _ref3.queryKey,
      responseBody = _ref3.responseBody,
      responseHeaders = _ref3.responseHeaders,
      responseText = _ref3.responseText,
      status = _ref3.status,
      url = _ref3.url;

  return {
    type: actionTypes.REQUEST_FAILURE,
    url: url,
    body: body,
    duration: duration,
    status: status,
    responseBody: responseBody,
    responseText: responseText,
    responseHeaders: responseHeaders,
    meta: meta,
    queryKey: queryKey,
    time: Date.now()
  };
};

var mutateStart = exports.mutateStart = function mutateStart(_ref4) {
  var body = _ref4.body,
      meta = _ref4.meta,
      networkHandler = _ref4.networkHandler,
      optimisticEntities = _ref4.optimisticEntities,
      queryKey = _ref4.queryKey,
      url = _ref4.url;

  return {
    type: actionTypes.MUTATE_START,
    url: url,
    body: body,
    networkHandler: networkHandler,
    optimisticEntities: optimisticEntities,
    queryKey: queryKey,
    meta: meta
  };
};

var mutateSuccess = exports.mutateSuccess = function mutateSuccess(_ref5) {
  var body = _ref5.body,
      duration = _ref5.duration,
      entities = _ref5.entities,
      results = _ref5.results,
      meta = _ref5.meta,
      queryKey = _ref5.queryKey,
      responseBody = _ref5.responseBody,
      responseHeaders = _ref5.responseHeaders,
      responseText = _ref5.responseText,
      status = _ref5.status,
      url = _ref5.url;

  return {
    type: actionTypes.MUTATE_SUCCESS,
    url: url,
    body: body,
    duration: duration,
    status: status,
    responseBody: responseBody,
    responseText: responseText,
    responseHeaders: responseHeaders,
    entities: entities,
    results: results,
    queryKey: queryKey,
    time: Date.now(),
    meta: meta
  };
};

var mutateFailure = exports.mutateFailure = function mutateFailure(_ref6) {
  var body = _ref6.body,
      duration = _ref6.duration,
      meta = _ref6.meta,
      queryKey = _ref6.queryKey,
      responseBody = _ref6.responseBody,
      responseHeaders = _ref6.responseHeaders,
      responseText = _ref6.responseText,
      rolledBackEntities = _ref6.rolledBackEntities,
      status = _ref6.status,
      url = _ref6.url;

  return {
    type: actionTypes.MUTATE_FAILURE,
    url: url,
    body: body,
    duration: duration,
    status: status,
    responseBody: responseBody,
    responseText: responseText,
    responseHeaders: responseHeaders,
    rolledBackEntities: rolledBackEntities,
    queryKey: queryKey,
    time: Date.now(),
    meta: meta
  };
};

var requestAsync = exports.requestAsync = function requestAsync(_ref7) {
  var body = _ref7.body,
      errorCallback = _ref7.errorCallback,
      _ref7$force = _ref7.force,
      force = _ref7$force === undefined ? true : _ref7$force,
      _ref7$meta = _ref7.meta,
      meta = _ref7$meta === undefined ? {} : _ref7$meta,
      options = _ref7.options,
      queryKey = _ref7.queryKey,
      retry = _ref7.retry,
      successCallback = _ref7.successCallback,
      transform = _ref7.transform,
      transformResult = _ref7.transformResult,
      _ref7$update = _ref7.update,
      update = _ref7$update === undefined ? {} : _ref7$update,
      updateResult = _ref7.updateResult,
      url = _ref7.url,
      unstable_preDispatchCallback = _ref7.unstable_preDispatchCallback;

  return {
    type: actionTypes.REQUEST_ASYNC,
    body: body,
    errorCallback: errorCallback,
    force: force,
    queryKey: queryKey,
    meta: meta,
    options: options,
    retry: retry,
    successCallback: successCallback,
    transform: transform,
    transformResult: transformResult,
    update: update,
    updateResult: updateResult,
    url: url,
    unstable_preDispatchCallback: unstable_preDispatchCallback
  };
};

var mutateAsync = exports.mutateAsync = function mutateAsync(_ref8) {
  var body = _ref8.body,
      meta = _ref8.meta,
      optimisticUpdate = _ref8.optimisticUpdate,
      options = _ref8.options,
      queryKey = _ref8.queryKey,
      rollback = _ref8.rollback,
      transform = _ref8.transform,
      transformResult = _ref8.transformResult,
      update = _ref8.update,
      updateResult = _ref8.updateResult,
      url = _ref8.url;

  return {
    type: actionTypes.MUTATE_ASYNC,
    body: body,
    meta: meta,
    optimisticUpdate: optimisticUpdate,
    options: options,
    queryKey: queryKey,
    rollback: rollback,
    transform: transform,
    transformResult: transformResult,
    update: update,
    updateResult: updateResult,
    url: url
  };
};

var cancelQuery = exports.cancelQuery = function cancelQuery(queryKey) {
  return {
    type: actionTypes.CANCEL_QUERY,
    queryKey: queryKey
  };
};

var updateEntities = exports.updateEntities = function updateEntities(update) {
  return {
    type: actionTypes.UPDATE_ENTITIES,
    update: update
  };
};

var updateResults = exports.updateResults = function updateResults(update) {
  return {
    type: actionTypes.UPDATE_RESULTS,
    update: update
  };
};