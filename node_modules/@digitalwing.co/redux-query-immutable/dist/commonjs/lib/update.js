'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rollbackResults = exports.rollbackEntities = exports.optimisticUpdateResults = exports.optimisticUpdateEntities = exports.updateResults = exports.updateEntities = undefined;

var _immutable = require('immutable');

var updateEntities = exports.updateEntities = function updateEntities(update) {
  var entities = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _immutable.Map();
  var transformed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _immutable.Map();

  // If update, not supplied, then no change to entities should be made
  return Object.keys(update || {}).reduce(function (accum, key) {
    return accum.set(key, update[key](entities.get(key), transformed.get(key)));
  }, new _immutable.Map());
};

var updateResults = exports.updateResults = function updateResults(updateResult) {
  var results = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _immutable.Map();
  var transformedResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _immutable.Map();

  // If update, not supplied, then no change to entities should be made
  return Object.keys(updateResult || {}).reduce(function (accum, key) {
    return accum.set(key, updateResult[key](results.get(key), transformedResult.get(key)));
  }, new _immutable.Map());
};

var optimisticUpdateEntities = exports.optimisticUpdateEntities = function optimisticUpdateEntities(optimisticUpdate) {
  var entities = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _immutable.Map();

  return Object.keys(optimisticUpdate).reduce(function (accum, key) {
    if (optimisticUpdate[key]) {
      return accum.set(key, optimisticUpdate[key](entities.get(key)));
    }
    return accum.set(key, entities.get(key));
  }, new _immutable.Map());
};

var optimisticUpdateResults = exports.optimisticUpdateResults = function optimisticUpdateResults(optimisticUpdateResult) {
  var results = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _immutable.Map();

  return Object.keys(optimisticUpdateResult).reduce(function (accum, key) {
    if (optimisticUpdateResult[key]) {
      return accum.set(key, optimisticUpdateResult[key](results.get(key)));
    }
    return accum.set(key, results.get(key));
  }, new _immutable.Map());
};

var rollbackEntities = exports.rollbackEntities = function rollbackEntities() {
  var rollback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var initialEntities = arguments[1];
  var entities = arguments[2];

  return Object.keys(initialEntities.toObject()).reduce(function (accum, key) {
    if (rollback[key]) {
      return accum.set(key, rollback[key](initialEntities.getIn([key]), entities.getIn([key])));
    } else {
      // Default to just reverting to the initial state for that
      // entity (before the optimistic update)
      return accum.set(key, initialEntities.getIn([key]));
    }
  }, new _immutable.Map());
};

var rollbackResults = exports.rollbackResults = function rollbackResults() {
  var rollback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var initialResults = arguments[1];
  var results = arguments[2];

  return Object.keys(initialResults.toObject()).reduce(function (accum, key) {
    if (rollback[key]) {
      return accum.set(key, rollback[key](initialResults.getIn([key]), results.getIn([key])));
    } else {
      // Default to just reverting to the initial state for that
      // entity (before the optimistic update)
      return accum.set(key, initialResults.getIn([key]));
    }
  }, new _immutable.Map());
};