'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _httpMethods = require('../constants/http-methods');

var httpMethods = _interopRequireWildcard(_httpMethods);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createRequest = function createRequest(url, method) {
  switch (method) {
    case httpMethods.HEAD:
      return _superagent2.default.head(url);
    case httpMethods.GET:
      return _superagent2.default.get(url);
    case httpMethods.POST:
      return _superagent2.default.post(url);
    case httpMethods.PUT:
      return _superagent2.default.put(url);
    case httpMethods.PATCH:
      return _superagent2.default.patch(url);
    case httpMethods.DELETE:
      return _superagent2.default.delete(url);
    default:
      throw new Error('Unsupported HTTP method: ' + method);
  }
};

var superagentNetworkInterface = function superagentNetworkInterface(url, method) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      body = _ref.body,
      headers = _ref.headers,
      credentials = _ref.credentials,
      multipart = _ref.multipart;

  var request = createRequest(url, method, body);

  if (headers) {
    request.set(headers);
  }

  if (body && !multipart) {
    request.send(body);
  }

  if (credentials === 'include') {
    request.withCredentials();
  }

  if (body && multipart) {
    (0, _invariant2.default)(httpMethods.POST === method, 'Files can only be uploaded with POST requests.');
    var fields = body.fields,
        files = body.files;


    Array.isArray(fields) && fields.forEach(function (field) {
      return request.field(field.key, field.value);
    });
    Array.isArray(files) && files.forEach(function (file) {
      return request.attach(file.key, file.value);
    });
  }

  var execute = function execute(cb) {
    request.end(function (err, response) {
      var resStatus = response && response.status || 0;
      var resBody = response && response.body || undefined;
      var resText = response && response.text || undefined;
      var resHeaders = response && response.header || undefined;

      cb(err, resStatus, resBody, resText, resHeaders);
    });
  };

  var abort = function abort() {
    return request.abort();
  };

  return {
    abort: abort,
    execute: execute,
    instance: request
  };
};

exports.default = superagentNetworkInterface;