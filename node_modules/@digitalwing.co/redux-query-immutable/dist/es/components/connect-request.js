'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash.difference');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.includes');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.intersection');

var _lodash6 = _interopRequireDefault(_lodash5);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actions = require('../actions');

var _queryKey = require('../lib/query-key');

var _shallowEqual = require('../lib/shallow-equal');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _storeShape = require('../lib/store-shape');

var _storeShape2 = _interopRequireDefault(_storeShape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ensureArray = function ensureArray(maybe) {
  return Array.isArray(maybe) ? maybe : [maybe];
};

var diffConfigs = function diffConfigs(prevConfigs, configs) {
  var prevQueryKeys = prevConfigs.map(_queryKey.getQueryKey);
  var queryKeys = configs.map(_queryKey.getQueryKey);

  var intersect = (0, _lodash6.default)(prevQueryKeys, queryKeys);
  var cancelKeys = (0, _lodash2.default)(prevQueryKeys, intersect);
  var requestKeys = (0, _lodash2.default)(queryKeys, intersect);

  return { cancelKeys: cancelKeys, requestKeys: requestKeys };
};

var connectRequest = function connectRequest(mapPropsToConfigs) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (WrappedComponent) {
    var _options$pure = options.pure,
        pure = _options$pure === undefined ? true : _options$pure,
        _options$withRef = options.withRef,
        withRef = _options$withRef === undefined ? false : _options$withRef;

    var ConnectRequest = function (_React$Component) {
      _inherits(ConnectRequest, _React$Component);

      function ConnectRequest() {
        _classCallCheck(this, ConnectRequest);

        var _this = _possibleConstructorReturn(this, (ConnectRequest.__proto__ || Object.getPrototypeOf(ConnectRequest)).call(this));

        _this.forceRequest = _this.forceRequest.bind(_this);

        // A set of URLs that identify all pending requests
        _this._pendingRequests = {};
        _this._wrappedInstance = null;
        return _this;
      }

      _createClass(ConnectRequest, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
          if (pure) {
            return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState);
          } else {
            return true;
          }
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          var configs = mapPropsToConfigs(this.props);
          this.requestAsync(configs, false, true);
        }
      }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
          var prevConfigs = ensureArray(mapPropsToConfigs(prevProps)).filter(Boolean);
          var configs = ensureArray(mapPropsToConfigs(this.props)).filter(Boolean);

          var _diffConfigs = diffConfigs(prevConfigs, configs),
              cancelKeys = _diffConfigs.cancelKeys,
              requestKeys = _diffConfigs.requestKeys;

          var requestConfigs = configs.filter(function (config) {
            return (0, _lodash4.default)(requestKeys, (0, _queryKey.getQueryKey)(config));
          });

          if (cancelKeys.length) {
            this.cancelPendingRequests(cancelKeys);
          }
          if (requestConfigs.length) {
            this.requestAsync(requestConfigs, false, true);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          var cancelKeys = Object.keys(this._pendingRequests);
          this.cancelPendingRequests(cancelKeys);
        }
      }, {
        key: 'getWrappedInstance',
        value: function getWrappedInstance() {
          return this._wrappedInstance;
        }
      }, {
        key: 'cancelPendingRequests',
        value: function cancelPendingRequests(cancelKeys) {
          var cancelKeysArray = ensureArray(cancelKeys);

          if (cancelKeysArray.length > 0) {
            var dispatch = this.context.store.dispatch;

            var pendingKeys = Object.keys(this._pendingRequests);

            cancelKeysArray.filter(function (key) {
              return (0, _lodash4.default)(pendingKeys, key);
            }).forEach(function (queryKey) {
              return dispatch((0, _actions.cancelQuery)(queryKey));
            });
          }
        }
      }, {
        key: 'requestAsync',
        value: function requestAsync(configs) {
          var _this2 = this;

          var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var retry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          // propsToConfig mapping has happened already
          ensureArray(configs).filter(Boolean).forEach(function (c) {
            _this2.makeRequest(c, force, retry);
          });
        }
      }, {
        key: 'makeRequest',
        value: function makeRequest(config, force, retry) {
          var _this3 = this;

          var dispatch = this.context.store.dispatch;


          if (config.url) {
            var queryKey = (0, _queryKey.getQueryKey)(config);
            var requestPromise = dispatch((0, _actions.requestAsync)(_extends({
              force: force,
              retry: retry
            }, config, {
              unstable_preDispatchCallback: function unstable_preDispatchCallback() {
                delete _this3._pendingRequests[queryKey];
              }
            }))).then(config.requestCallback ? function (resp) {
              return config.requestCallback(resp);
            } : function () {});

            if (requestPromise) {
              // Record pending request since a promise was returned
              this._pendingRequests[queryKey] = requestPromise;
            }
          }
        }
      }, {
        key: 'forceRequest',
        value: function forceRequest() {
          this.requestAsync(mapPropsToConfigs(this.props), true, false);
        }
      }, {
        key: 'render',
        value: function render() {
          var _this4 = this;

          if (withRef) {
            return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
              forceRequest: this.forceRequest,
              ref: function ref(_ref) {
                _this4._wrappedInstance = _ref;
              }
            }));
          } else {
            return _react2.default.createElement(WrappedComponent, _extends({}, this.props, { forceRequest: this.forceRequest }));
          }
        }
      }]);

      return ConnectRequest;
    }(_react2.default.Component);

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    ConnectRequest.displayName = 'ConnectRequest(' + wrappedComponentName + ')';
    ConnectRequest.contextTypes = {
      store: _storeShape2.default
    };

    return ConnectRequest;
  };
};

exports.default = connectRequest;