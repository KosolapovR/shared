'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var _actionTypes = require('../constants/action-types');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var initialState = new _immutable.Map();

var withoutPath = function withoutPath(state, path) {
  var _path = _toArray(path),
      key = _path[0],
      restPath = _path.slice(1);

  if (restPath.length) {
    var newMap = (0, _immutable.fromJS)(_defineProperty({}, key, withoutPath(state.get(key), restPath)));
    return state.merge(newMap);
  } else {
    return state.delete(key);
  }
};

var entities = function entities() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  if (action.type === _actionTypes.RESET) {
    return 'entities' in action ? action.entities : initialState;
  } else if (action.type === _actionTypes.MUTATE_START && action.optimisticEntities) {
    return state.merge(action.optimisticEntities);
  } else if (action.type === _actionTypes.MUTATE_FAILURE && action.rolledBackEntities) {
    return state.merge(action.rolledBackEntities);
  } else if (action.type === _actionTypes.REQUEST_SUCCESS || action.type === _actionTypes.MUTATE_SUCCESS) {
    return state.merge(action.entities);
  } else if (action.type === _actionTypes.UPDATE_ENTITIES) {
    return state.merge(action.update);
  } else {
    return state;
  }
};

exports.default = entities;