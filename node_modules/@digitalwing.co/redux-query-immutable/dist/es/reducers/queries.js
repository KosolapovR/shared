'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _actionTypes = require('../constants/action-types');

var actionTypes = _interopRequireWildcard(_actionTypes);

var _immutable = require('immutable');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = (0, _immutable.Map)();

var queries = function queries() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  switch (action.type) {
    case actionTypes.RESET:
      {
        return initialState;
      }
    case actionTypes.MUTATE_START:
    case actionTypes.REQUEST_START:
      {
        var newMap = _defineProperty({}, action.queryKey, {
          url: action.url,
          isFinished: false,
          isPending: true,
          networkHandler: action.networkHandler,
          isMutation: action.type === actionTypes.MUTATE_START,
          queryCount: state.get(action.queryKey) ? state.getIn([action.queryKey, 'queryCount']) + 1 : 1
        });

        return state.merge((0, _immutable.fromJS)(newMap));
      }
    case actionTypes.REQUEST_SUCCESS:
    case actionTypes.MUTATE_FAILURE:
    case actionTypes.MUTATE_SUCCESS:
    case actionTypes.REQUEST_FAILURE:
      {
        var newQueryKeyState = {
          isFinished: true,
          isPending: false,
          lastUpdated: action.time,
          status: action.status,
          headers: action.responseHeaders
        };

        return state.mergeIn([action.queryKey], (0, _immutable.fromJS)(newQueryKeyState));
      }
    case actionTypes.CANCEL_QUERY:
      {
        if (state.getIn([action.queryKey, 'isPending'])) {
          // Make sure request is actually pending

          var _newQueryKeyState = {
            isFinished: true,
            isPending: false,
            status: 0
          };

          return state.mergeIn([action.queryKey], (0, _immutable.fromJS)(_newQueryKeyState));
        }

        return state;
      }
    default:
      {
        return state;
      }
  }
};

exports.default = queries;